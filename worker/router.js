/**
 * A simple router implementation using URLPattern.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API
 */
// import authentication from 'authentication.js'
// import  handleAuthentication  from './authentication.js';
class Router {
	/**
	 * An array of routes.
	 * @type {Array}
	 */
	routes = [];
  
	/**
	 * Handles the incoming request by matching it to a registered route.
	 * @param {Request} request - The incoming request.
	 * @returns {Response} - The response generated by the matched route.
	 */
	handle(request) {
	  for (const route of this.routes) {
		const match = route[0](request);
		if (match) {
		  return route[1]({ ...match, request });
		}
	  }
	  const match = this.routes.find(([matcher]) => matcher(request));
	  if (match) {
		return match[1](request);
	  }
	}
  
	/**
	 * Registers a new route.
	 * @param {Function} handler - The function to handle the request.
	 * @param {string} path - The path to match.
	 * @param {string} [method] - The HTTP method to match.
	 */
	register(handler, path, method) {
	  const urlPattern = new URLPattern({ pathname: path });
	  this.routes.push([
		(request) => {
		  if (method === undefined || request.method.toLowerCase() === method) {
			const match = urlPattern.exec({
			  pathname: new URL(request.url).pathname,
			});
			if (match) {
			  return { params: match.pathname.groups };
			}
		  }
		},
		(args) => handler(args),
	  ]);
	}
  
	/**
	 * Registers a new route for HTTP OPTIONS requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	options(path, handler) {
	  this.register(handler, path, "options");
	}
  
	/**
	 * Registers a new route for HTTP HEAD requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	head(path, handler) {
	  this.register(handler, path, "head");
	}
  
	/**
	 * Registers a new route for HTTP GET requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	get(path, handler) {
	  this.register(handler, path, "get");
	}
  
	/**
	 * Registers a new route for HTTP POST requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	post(path, handler) {
	  this.register(handler, path, "post");
	}
  
	/**
	 * Registers a new route for HTTP PUT requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	put(path, handler) {
	  this.register(handler, path, "put");
	}
  
	/**
	 * Registers a new route for HTTP PATCH requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	patch(path, handler) {
	  this.register(handler, path, "patch");
	}
  
	/**
	 * Registers a new route for HTTP DELETE requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	delete(path, handler) {
	  this.register(handler, path, "delete");
	}
  
	/**
	 * Registers a new route for HTTP AUTHENTICATE requests.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	authenticate(path, handler) {
	  this.register(handler, path, "post");
	}
  
	/**
	 * Registers a new route for all HTTP methods.
	 * @param {string} path - The path to match.
	 * @param {Function} handler - The function to handle the request.
	 */
	all(path, handler) {
	  this.register(handler, path);
	}
  }
  
  // Setting up our application:
  
  const router = new Router();
  
  // GET collection index
  router.get("/api/todos", () => new Response("Todos Index!"));
  
  // GET item
  router.get(
	"/api/todos/:id",
	({ params }) => new Response(`Todo #${params.id}`)
  );
  
  // Authenticate
  //'/authenticate/*', authentication.fetch());
  
  // POST to the collection (we'll use async here)
  router.post("/api/todos", async ({ request }) => {
	const content = await request.json();
  
	return new Response("Creating Todo: " + JSON.stringify(content));
  });
  
  // 404 for everything else
  router.all("*", () => new Response("Not Found.", { status: 404 }));
  
  export default router;